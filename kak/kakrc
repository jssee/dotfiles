# plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload

plug "occivink/kakoune-phantom-selection" %{
    declare-user-mode phantom-selection
    map global user h -docstring "Phantom selections" ": enter-user-mode phantom-selection<ret>"
    map global phantom-selection n -docstring "Next" ": phantom-selection-iterate-next<ret>"
    map global phantom-selection p -docstring "Previous" ": phantom-selection-iterate-prev<ret>"
    map global phantom-selection c -docstring "Clear" ": phantom-selection-select-all; phantom-selection-clear<ret>"
    map global phantom-selection a -docstring "Add" ": phantom-selection-add-selection<ret>"
}

plug "alexherbo2/auto-pairs.kak" %{
  map global user s ': auto-pairs-surround <lt> <gt><ret>' -docstring 'Surround'
  hook global WinCreate .* %{ auto-pairs-enable }
  hook global WinSetOption filetype=(html|javascript|typescript) %{
    set-option -add buffer auto_pairs < >
  }
}

plug "occivink/kakoune-filetree" %{
  set-option global filetree_find_cmd 'fd --type file .'
}

plug "lenormf/kakoune-extra" config %{
  set-option global syntastic_autoformat true
  set-option global grepmenucmd 'rg --vimgrep'
  
  syntastic-declare-filetype "javascript" \
    'eslint --config .eslintrc.js --format=node_modules/eslint-formatter-kakoune' \
    'prettier --parser=babel'
}

# source local
evaluate-commands %sh{
  for file in "$HOME"/.config/kak/local/*.kak; do
    printf "%s\n" "try %{
        source '$file'
        echo -debug 'sourced $file'
    } catch %{
        echo -debug %val{error}
    } catch %{
    	echo -debug '[error] could not source $file'
    }"
    done
}

# options
set-option global ui_options ncurses_assistant=cat
set-option global tabstop 2
set-option global indentwidth 2
set-option global incsearch true
set-option global scrolloff 10,10
set-option global autowrap_column 80
set-option global autoreload true
set-option global grepcmd 'rg --column -with-filename --smart-case'

colorscheme gruvbox
add-highlighter global/ show-matching
add-highlighter global/ number-lines -hlcursor -separator ' '
add-highlighter global/ wrap -word -marker "â†³ "

# commands
define-command find -params 1 -shell-script-candidates 'fd --type file' 'edit %arg(1)'
define-command strip-whitespace -params 0 %{ execute-keys -draft \%s\h+$<ret>d }
define-command comment %{ try comment-block catch comment-line }

# mappings
map global normal ';' ':'
map global normal ':' ';'
map global normal ',' '<space>'
map global normal '<space>' ','
map global normal { [p
map global normal } ]p

map global goto n '<esc>: buffer-next<ret>'     -docstring 'next buffer'
map global goto p '<esc>: buffer-previous<ret>' -docstring 'previous buffer'

map global user f ': find '                     -docstring 'find files'
map global user p '!pbpaste<ret>'               -docstring 'paste from system keyboard'
map global user y '<a-|>pbcopy<ret>'            -docstring 'yank to system keyboard'
map global user / ': grepmenu '                 -docstring 'grepmenu <pattern> <target>'
map global user c ': comment<ret>'              -docstring 'comment selection'

# hooks
# <k><j> -> esc
hook global InsertChar j %{
  try %{
    exec -draft hH <a-k>kj<ret> d
    exec <esc>
}}

# cycle completion candidates with <tab> / <s-tab>
hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

# initialize idsession
hook global KakBegin .* idsession
