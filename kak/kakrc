# plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload config %{
  set-option global plug_always_ensure true
  hook global WinSetOption filetype=plug %{
    remove-highlighter buffer/numbers
    remove-highlighter buffer/matching
    remove-highlighter buffer/wrap
    remove-highlighter buffer/show-whitespaces
  }
}

plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path . # `--path .' is needed by recent versions of cargo
} config %{
    set-option global lsp_diagnostic_line_error_sign '║'
    set-option global lsp_diagnostic_line_warning_sign '┊'

    # set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\s,=;*(){}\[\]]\z<ret>'"
    hook global WinSetOption filetype=(javascript|typescript) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor true
        lsp-enable-window
        set-face window DiagnosticError default+u
        set-face window DiagnosticWarning default+u
    }

    hook global KakEnd .* lsp-exit
}

plug "alexherbo2/auto-pairs.kak" %{
  map global user s ': auto-pairs-surround <lt> <gt><ret>' -docstring 'Surround'
  hook global WinCreate .* %{ auto-pairs-enable }
  hook global WinSetOption filetype=(html|javascript|typescript) %{
    set-option -add buffer auto_pairs < >
  }
}

plug "alexherbo2/explore.kak"


# source extra
evaluate-commands %sh{
  for file in "$HOME"/.config/kak/extra/*.kak; do
  	printf "%s\n" "try %{
    	source '$file'
    	echo -debug 'sourced $file'
  	} catch %{
    	echo -debug %val{error}
  	} catch %{
    	echo -debug '[error] could not source $file'
  	}"
	done
}

# options
set-option global ui_options ncurses_assistant=cat
set-option global tabstop 2
set-option global indentwidth 2
set-option global scrolloff 10,10
set-option global grepcmd 'rg --column -with-filename --smart-case'

colorscheme gruvbox
add-highlighter global/ show-matching
add-highlighter global/ number-lines -hlcursor -separator ' '
add-highlighter global/ wrap -word

# commands
define-command find -params 1 -shell-script-candidates 'fd --type file' 'edit %arg(1)'
define-command strip-whitespace -params 0 %{ execute-keys -draft \%s\h+$<ret>d }
define-command -hidden -override explore-files-recursive -params 0..1 %{
  explore-files-display "fd %sh(test $kak_opt_explore_files_show_hidden = true && echo --hidden)" %arg(1)
}

# mappings
map global normal ";" ":"
map global normal ":" ";"
map global normal "," "<space>"
map global normal "<space>" ","
map global normal { [p
map global normal } ]p

map global goto f '<esc>: find '                -docstring 'find files'
map global goto n '<esc>: buffer-next<ret>'     -docstring 'next buffer'
map global goto p '<esc>: buffer-previous<ret>' -docstring 'previous buffer'

map global user p '!pbpaste<ret>'               -docstring 'paste from system keyboard'
map global user y '<a-|>pbcopy<ret>'            -docstring 'yank to system keyboard'
map global user / ': grepmenu '                 -docstring 'grepmenu <pattern> <target>'

# hooks
# <k><j> -> esc
hook global InsertChar j %{
  try %{
    exec -draft hH <a-k>kj<ret> d
    exec <esc>
}}

# cycle completion candidates with <tab> / <s-tab>
hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

hook global KakBegin .* idsession

# filetype specifics
hook global WinSetOption filetype=(javascript|typescript) %{
  set-option buffer formatcmd 'prettier --parser=babylon'
  set-option buffer lintcmd 'eslint --config .eslintrc.js --format=node_modules/eslint-formatter-kakoune'
  lint-enable
  lint
  hook buffer BufWritePost .* %{ lint; format }
}

hook global WinSetOption filetype=(css|scss) %{
	set-option buffer formatcmd 'prettier --parser=scss'
	hook buffer BufWritePost .* %{ format }
}

