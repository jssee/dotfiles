if &compatible
  set nocompatible
endif

packadd minpac
packadd cfilter

if !exists('*minpac#init')
  finish
endif

" plugins
call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('romainl/vim-qf')
call minpac#add('sheerun/vim-polyglot')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-dispatch')
call minpac#add('tpope/vim-eunuch')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('wellle/targets.vim')

" minpac helpers
command! PackUpdate packadd minpac | source $MYVIMRC | redraw | call minpac#update()
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()
command! PackStatus packadd minpac | source $MYVIMRC | call minpac#status()

syntax on
colorscheme bruin
filetype plugin indent on

let mapleader = "\<Space>"

" nicer splits
let &fillchars='vert: ,fold:·'
let &listchars='tab:| ,eol:¬,trail:⣿,extends:→,precedes:←'

" change cursor shape based on mode
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

set autoindent
set autoread
set autowriteall
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed
set complete+=d
set copyindent
set cursorline
set directory^=$HOME/.vim/tmp//
set expandtab
set foldlevel=99
set foldlevelstart=999
set foldmethod=indent
set foldnestmax=10
set formatoptions+=t
set hidden
set hlsearch
set ignorecase
set ignorecase
set incsearch
set incsearch
set infercase
set infercase
set laststatus=2
set lazyredraw
set magic
set modelines=0
set mouse=a
set nobackup
set noerrorbells
set noshowmode
set noshowmode
set noswapfile
set number
set path=.,**
set ruler
set scrolloff=10
set shiftwidth=2
set showcmd
set smartcase
set smartcase
set smartindent
set softtabstop=2
set splitbelow
set splitright
set tabstop=2
set tags=./tags;,tags;
set termguicolors
set timeoutlen=300 ttimeoutlen=100
set title
set tw=100
set updatetime=300
set visualbell
set whichwrap=b,h,l,s,<,>,[,],~
set wildcharm=<C-z>
set wildignorecase
set wildmenu
set wildmode=full

set diffopt&
      \ diffopt+=vertical
      \ diffopt+=hiddenoff

if executable('rg')
  set grepprg=rg\ --vimgrep
endif

:nmap ; :
xnoremap ; :
inoremap kj <Esc>

" jumps
nnoremap ' `

" window management
nnoremap <silent> <Leader>wd :silent close<CR>
nnoremap <silent> <Leader>w- :silent sp<CR>
nnoremap <silent> <Leader>w/ :silent vsp<CR>
nnoremap <silent> <Leader>wh :silent wincmd h<CR>
nnoremap <silent> <Leader>wj :silent wincmd j<CR>
nnoremap <silent> <Leader>wk :silent wincmd k<CR>
nnoremap <silent> <Leader>wl :silent wincmd l<CR>

" buffers
nnoremap <silent> <Leader><Leader> :bp<CR>
nnoremap <silent> <Tab> :bn<CR>

" tab through search results
cnoremap <expr> <Tab>   getcmdtype() == "/" \|\| getcmdtype() == "?" ? "<CR>/<C-r>/" : "<C-z>"
cnoremap <expr> <S-Tab> getcmdtype() == "/" \|\| getcmdtype() == "?" ? "<CR>?<C-r>/" : "<S-Tab>"

nnoremap <Leader>/ :Grep<Space>
nnoremap <Leader>* :Grep <C-R>=expand("<cword>")<CR><CR>

augroup groupie
  autocmd!
  " Return to last edit position when opening files
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  " Trim empty whitespace on save
  autocmd BufWritePre * call fun#trim()
  " Resize splits when the window is resized
  autocmd VimResized * :wincmd =
augroup END

augroup filetyping
  " correct some filetypes
  autocmd!
  autocmd BufRead,BufNewFile jrnl*.txt,TODO,*.mdx setfiletype markdown
  autocmd BufRead,BufNewFile .{babel,eslint,stylelint,jshint,prettier}rc,.tern-* setfiletype json
  autocmd BufRead,BufNewFile .envrc setfiletype bash
augroup END

augroup qf
  " Automatically open quickfix window
	autocmd!
	autocmd QuickFixCmdPost cgetexpr cwindow
	autocmd QuickFixCmdPost lgetexpr lwindow
augroup END
" handy command for func#grep
command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr fun#grep(<q-args>)
command! -nargs=+ -complete=file_in_path -bar LGrep lgetexpr fun#grep(<q-args>)

